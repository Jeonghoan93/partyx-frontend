// learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  Review       Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  listing_url         String
  name                String
  description         String
  summary             String
  space               String?
  imageSrc            String
  createdAt           DateTime  @default(now())
  category            String
  minimumGuests       Int
  MaxmumGuests        Int
  locationValue       String
  price               Int
  userId              String    @db.ObjectId
  image               String
  address             String
  interaction         String
  cancellation_policy String
  event_rules         String?
  event_type          String?
  music_type          String?
  latitude            Float?
  longitude           Float?
  rating              Float?
  first_review        DateTime?
  last_review         DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  amenities    String[]
  reviews      Review[]
  reservations Reservation[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  listingId  String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  listingId String   @db.ObjectId
  userId    String   @db.ObjectId
  comment   String
  rating    Int

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
